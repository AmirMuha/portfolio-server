datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "./generated/type-graphql"
}

model Admin {
  id          String    @id @unique @default(uuid()) @db.Uuid
  email       String    @unique
  fname       String
  lname       String
  linkedIn    String
  whatsapp    String
  instagram   String
  github      String
  skype       String
  heroImage   String
  resumes     String[]
  confirmed   Boolean   @default(false)
  about       About[]
  messages    Message[]
  projects    Project[]
  stack       Stack[]
  /// @TypeGraphQL.omit(output: true, input: true)
  apikey      String?
  /// @TypeGraphQL.omit(output: true)
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Stack {
  id    String @id @unique @default(uuid()) @db.Uuid
  title String
  image String
  admin Admin @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id String @db.Uuid
}

model Project {
  id              String         @id @unique @default(uuid()) @db.Uuid
  name            String
  image           String
  type            String
  github_url      String
  app_url         String
  summary         String         @db.Text
  tech_categories TechCategory[]
  questions       Question[]
  sketches        Sketch[]
  admin           Admin          @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id        String         @db.Uuid
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model TechCategory {
  id         String  @id @unique @default(uuid()) @db.Uuid
  name       String
  techs      Tech[]
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String  @db.Uuid
}

model Tech {
  id               String       @id @unique @default(uuid()) @db.Uuid
  name             String
  tech_categories  TechCategory @relation(fields: [tech_category_id], references: [id], onDelete: Cascade)
  tech_category_id String       @db.Uuid
}

model Question {
  id         String  @id @unique @default(uuid()) @db.Uuid
  question   String  @db.Text
  answer     String  @db.Text
  project    Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id String  @db.Uuid
}

model Sketch {
  id            String  @id @unique @default(uuid()) @db.Uuid
  title         String
  description   String  @db.Text
  summary       String  @db.Text
  downloadables String
  image         String
  project       Project @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id    String  @db.Uuid
}

model About {
  id        String   @id @unique @default(uuid()) @db.Uuid
  title     String
  body      String   @db.Text
  admin     Admin    @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id  String   @db.Uuid
  updatedAt DateTime @updatedAt
}

model Message {
  id            String   @id @unique @default(uuid()) @db.Uuid
  subject       String
  from          String
  files         String   @default("")
  body          String   @db.Text
  read_status   Boolean  @default(false)
  answer_status Boolean  @default(false)
  admin         Admin    @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  admin_id      String   @db.Uuid
  answeredAt    DateTime?
  createdAd     DateTime @default(now())
}
