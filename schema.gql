# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type About {
  admin: Admin!
  admin_id: String!
  body: String!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input AboutCreateInput {
  admin: AdminCreateNestedOneWithoutAboutInput!
  body: String!
  id: String
  title: String!
  updatedAt: DateTime
}

input AboutCreateManyAdminInput {
  body: String!
  id: String
  title: String!
  updatedAt: DateTime
}

input AboutCreateManyAdminInputEnvelope {
  data: [AboutCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input AboutCreateNestedManyWithoutAdminInput {
  connect: [AboutWhereUniqueInput!]
  connectOrCreate: [AboutCreateOrConnectWithoutAdminInput!]
  create: [AboutCreateWithoutAdminInput!]
  createMany: AboutCreateManyAdminInputEnvelope
}

input AboutCreateOrConnectWithoutAdminInput {
  create: AboutCreateWithoutAdminInput!
  where: AboutWhereUniqueInput!
}

input AboutCreateWithoutAdminInput {
  body: String!
  id: String
  title: String!
  updatedAt: DateTime
}

input AboutListRelationFilter {
  every: AboutWhereInput
  none: AboutWhereInput
  some: AboutWhereInput
}

input AboutOrderByRelationAggregateInput {
  _count: SortOrder
}

input AboutOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  admin_id: SortOrder
  body: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum AboutScalarFieldEnum {
  admin_id
  body
  id
  title
  updatedAt
}

input AboutScalarWhereInput {
  AND: [AboutScalarWhereInput!]
  NOT: [AboutScalarWhereInput!]
  OR: [AboutScalarWhereInput!]
  admin_id: StringFilter
  body: StringFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input AboutUpdateInput {
  admin: AdminUpdateOneRequiredWithoutAboutInput
  body: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AboutUpdateManyMutationInput {
  body: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AboutUpdateManyWithWhereWithoutAdminInput {
  data: AboutUpdateManyMutationInput!
  where: AboutScalarWhereInput!
}

input AboutUpdateManyWithoutAdminInput {
  connect: [AboutWhereUniqueInput!]
  connectOrCreate: [AboutCreateOrConnectWithoutAdminInput!]
  create: [AboutCreateWithoutAdminInput!]
  createMany: AboutCreateManyAdminInputEnvelope
  delete: [AboutWhereUniqueInput!]
  deleteMany: [AboutScalarWhereInput!]
  disconnect: [AboutWhereUniqueInput!]
  set: [AboutWhereUniqueInput!]
  update: [AboutUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [AboutUpdateManyWithWhereWithoutAdminInput!]
  upsert: [AboutUpsertWithWhereUniqueWithoutAdminInput!]
}

input AboutUpdateWithWhereUniqueWithoutAdminInput {
  data: AboutUpdateWithoutAdminInput!
  where: AboutWhereUniqueInput!
}

input AboutUpdateWithoutAdminInput {
  body: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AboutUpsertWithWhereUniqueWithoutAdminInput {
  create: AboutCreateWithoutAdminInput!
  update: AboutUpdateWithoutAdminInput!
  where: AboutWhereUniqueInput!
}

input AboutWhereInput {
  AND: [AboutWhereInput!]
  NOT: [AboutWhereInput!]
  OR: [AboutWhereInput!]
  admin: AdminRelationFilter
  admin_id: StringFilter
  body: StringFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input AboutWhereUniqueInput {
  id: String
}

type Admin {
  _count: AdminCount
  confirmed: Boolean!
  createdAt: DateTime!
  email: String!
  fname: String!
  github: String!
  heroImage: String!
  id: String!
  instagram: String!
  linkedIn: String!
  lname: String!
  resumes: [String!]!
  skype: String!
  updatedAt: DateTime!
  whatsapp: String!
}

type AdminCount {
  about: Int!
  messages: Int!
  projects: Int!
  stack: Int!
}

input AdminCreateInput {
  about: AboutCreateNestedManyWithoutAdminInput
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  fname: String!
  github: String!
  heroImage: String!
  id: String
  instagram: String!
  linkedIn: String!
  lname: String!
  messages: MessageCreateNestedManyWithoutAdminInput
  password: String!
  projects: ProjectCreateNestedManyWithoutAdminInput
  resumes: AdminCreateresumesInput
  skype: String!
  stack: StackCreateNestedManyWithoutAdminInput
  updatedAt: DateTime
  whatsapp: String!
}

input AdminCreateNestedOneWithoutAboutInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutAboutInput
  create: AdminCreateWithoutAboutInput
}

input AdminCreateNestedOneWithoutMessagesInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutMessagesInput
  create: AdminCreateWithoutMessagesInput
}

input AdminCreateNestedOneWithoutProjectsInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutProjectsInput
  create: AdminCreateWithoutProjectsInput
}

input AdminCreateNestedOneWithoutStackInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutStackInput
  create: AdminCreateWithoutStackInput
}

input AdminCreateOrConnectWithoutAboutInput {
  create: AdminCreateWithoutAboutInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateOrConnectWithoutMessagesInput {
  create: AdminCreateWithoutMessagesInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateOrConnectWithoutProjectsInput {
  create: AdminCreateWithoutProjectsInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateOrConnectWithoutStackInput {
  create: AdminCreateWithoutStackInput!
  where: AdminWhereUniqueInput!
}

input AdminCreateWithoutAboutInput {
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  fname: String!
  github: String!
  heroImage: String!
  id: String
  instagram: String!
  linkedIn: String!
  lname: String!
  messages: MessageCreateNestedManyWithoutAdminInput
  password: String!
  projects: ProjectCreateNestedManyWithoutAdminInput
  resumes: AdminCreateresumesInput
  skype: String!
  stack: StackCreateNestedManyWithoutAdminInput
  updatedAt: DateTime
  whatsapp: String!
}

input AdminCreateWithoutMessagesInput {
  about: AboutCreateNestedManyWithoutAdminInput
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  fname: String!
  github: String!
  heroImage: String!
  id: String
  instagram: String!
  linkedIn: String!
  lname: String!
  password: String!
  projects: ProjectCreateNestedManyWithoutAdminInput
  resumes: AdminCreateresumesInput
  skype: String!
  stack: StackCreateNestedManyWithoutAdminInput
  updatedAt: DateTime
  whatsapp: String!
}

input AdminCreateWithoutProjectsInput {
  about: AboutCreateNestedManyWithoutAdminInput
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  fname: String!
  github: String!
  heroImage: String!
  id: String
  instagram: String!
  linkedIn: String!
  lname: String!
  messages: MessageCreateNestedManyWithoutAdminInput
  password: String!
  resumes: AdminCreateresumesInput
  skype: String!
  stack: StackCreateNestedManyWithoutAdminInput
  updatedAt: DateTime
  whatsapp: String!
}

input AdminCreateWithoutStackInput {
  about: AboutCreateNestedManyWithoutAdminInput
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  fname: String!
  github: String!
  heroImage: String!
  id: String
  instagram: String!
  linkedIn: String!
  lname: String!
  messages: MessageCreateNestedManyWithoutAdminInput
  password: String!
  projects: ProjectCreateNestedManyWithoutAdminInput
  resumes: AdminCreateresumesInput
  skype: String!
  updatedAt: DateTime
  whatsapp: String!
}

input AdminCreateresumesInput {
  set: [String!]!
}

input AdminOrderByWithRelationInput {
  about: AboutOrderByRelationAggregateInput
  confirmed: SortOrder
  createdAt: SortOrder
  email: SortOrder
  fname: SortOrder
  github: SortOrder
  heroImage: SortOrder
  id: SortOrder
  instagram: SortOrder
  linkedIn: SortOrder
  lname: SortOrder
  messages: MessageOrderByRelationAggregateInput
  password: SortOrder
  projects: ProjectOrderByRelationAggregateInput
  resumes: SortOrder
  skype: SortOrder
  stack: StackOrderByRelationAggregateInput
  updatedAt: SortOrder
  whatsapp: SortOrder
}

input AdminRelationFilter {
  is: AdminWhereInput
  isNot: AdminWhereInput
}

input AdminUpdateInput {
  about: AboutUpdateManyWithoutAdminInput
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fname: StringFieldUpdateOperationsInput
  github: StringFieldUpdateOperationsInput
  heroImage: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instagram: StringFieldUpdateOperationsInput
  linkedIn: StringFieldUpdateOperationsInput
  lname: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutAdminInput
  password: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutAdminInput
  resumes: AdminUpdateresumesInput
  skype: StringFieldUpdateOperationsInput
  stack: StackUpdateManyWithoutAdminInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  whatsapp: StringFieldUpdateOperationsInput
}

input AdminUpdateOneRequiredWithoutAboutInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutAboutInput
  create: AdminCreateWithoutAboutInput
  update: AdminUpdateWithoutAboutInput
  upsert: AdminUpsertWithoutAboutInput
}

input AdminUpdateOneRequiredWithoutMessagesInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutMessagesInput
  create: AdminCreateWithoutMessagesInput
  update: AdminUpdateWithoutMessagesInput
  upsert: AdminUpsertWithoutMessagesInput
}

input AdminUpdateOneRequiredWithoutProjectsInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutProjectsInput
  create: AdminCreateWithoutProjectsInput
  update: AdminUpdateWithoutProjectsInput
  upsert: AdminUpsertWithoutProjectsInput
}

input AdminUpdateOneRequiredWithoutStackInput {
  connect: AdminWhereUniqueInput
  connectOrCreate: AdminCreateOrConnectWithoutStackInput
  create: AdminCreateWithoutStackInput
  update: AdminUpdateWithoutStackInput
  upsert: AdminUpsertWithoutStackInput
}

input AdminUpdateWithoutAboutInput {
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fname: StringFieldUpdateOperationsInput
  github: StringFieldUpdateOperationsInput
  heroImage: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instagram: StringFieldUpdateOperationsInput
  linkedIn: StringFieldUpdateOperationsInput
  lname: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutAdminInput
  password: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutAdminInput
  resumes: AdminUpdateresumesInput
  skype: StringFieldUpdateOperationsInput
  stack: StackUpdateManyWithoutAdminInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  whatsapp: StringFieldUpdateOperationsInput
}

input AdminUpdateWithoutMessagesInput {
  about: AboutUpdateManyWithoutAdminInput
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fname: StringFieldUpdateOperationsInput
  github: StringFieldUpdateOperationsInput
  heroImage: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instagram: StringFieldUpdateOperationsInput
  linkedIn: StringFieldUpdateOperationsInput
  lname: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutAdminInput
  resumes: AdminUpdateresumesInput
  skype: StringFieldUpdateOperationsInput
  stack: StackUpdateManyWithoutAdminInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  whatsapp: StringFieldUpdateOperationsInput
}

input AdminUpdateWithoutProjectsInput {
  about: AboutUpdateManyWithoutAdminInput
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fname: StringFieldUpdateOperationsInput
  github: StringFieldUpdateOperationsInput
  heroImage: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instagram: StringFieldUpdateOperationsInput
  linkedIn: StringFieldUpdateOperationsInput
  lname: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutAdminInput
  password: StringFieldUpdateOperationsInput
  resumes: AdminUpdateresumesInput
  skype: StringFieldUpdateOperationsInput
  stack: StackUpdateManyWithoutAdminInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  whatsapp: StringFieldUpdateOperationsInput
}

input AdminUpdateWithoutStackInput {
  about: AboutUpdateManyWithoutAdminInput
  confirmed: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  fname: StringFieldUpdateOperationsInput
  github: StringFieldUpdateOperationsInput
  heroImage: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  instagram: StringFieldUpdateOperationsInput
  linkedIn: StringFieldUpdateOperationsInput
  lname: StringFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutAdminInput
  password: StringFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutAdminInput
  resumes: AdminUpdateresumesInput
  skype: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  whatsapp: StringFieldUpdateOperationsInput
}

input AdminUpdateresumesInput {
  push: [String!]
  set: [String!]
}

input AdminUpsertWithoutAboutInput {
  create: AdminCreateWithoutAboutInput!
  update: AdminUpdateWithoutAboutInput!
}

input AdminUpsertWithoutMessagesInput {
  create: AdminCreateWithoutMessagesInput!
  update: AdminUpdateWithoutMessagesInput!
}

input AdminUpsertWithoutProjectsInput {
  create: AdminCreateWithoutProjectsInput!
  update: AdminUpdateWithoutProjectsInput!
}

input AdminUpsertWithoutStackInput {
  create: AdminCreateWithoutStackInput!
  update: AdminUpdateWithoutStackInput!
}

input AdminWhereInput {
  AND: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  about: AboutListRelationFilter
  confirmed: BoolFilter
  createdAt: DateTimeFilter
  email: StringFilter
  fname: StringFilter
  github: StringFilter
  heroImage: StringFilter
  id: StringFilter
  instagram: StringFilter
  linkedIn: StringFilter
  lname: StringFilter
  messages: MessageListRelationFilter
  password: StringFilter
  projects: ProjectListRelationFilter
  resumes: StringNullableListFilter
  skype: StringFilter
  stack: StackListRelationFilter
  updatedAt: DateTimeFilter
  whatsapp: StringFilter
}

input AdminWhereUniqueInput {
  email: String
  id: String
}

type AffectedRowsOutput {
  count: Int!
}

input AnswerMessageInput {
  from: String!
  message: String!
  messageId: String!
  subject: String!
  to: String!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input CreateProjectInput_PWNR {
  app_url: String!
  github_url: String!
  image: String!
  name: String!
  questions: [QuestionCreateInput_PWNR!]!
  sketches: [SketchCreateInput_PWNR!]!
  summary: String!
  techCategories: [TechCategoryCreateInput_PWNR!]!
  type: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input LoginInputType {
  email: String!
  password: String!
}

type LoginReturnType {
  token: String
}

type Message {
  admin: Admin!
  admin_id: String!
  answer_status: Boolean!
  answeredAt: DateTime
  body: String!
  createdAd: DateTime!
  files: String!
  from: String!
  id: String!
  read_status: Boolean!
  subject: String!
}

input MessageCreateInput {
  admin: AdminCreateNestedOneWithoutMessagesInput!
  answer_status: Boolean
  answeredAt: DateTime
  body: String!
  createdAd: DateTime
  files: String
  from: String!
  id: String
  read_status: Boolean
  subject: String!
}

input MessageCreateManyAdminInput {
  answer_status: Boolean
  answeredAt: DateTime
  body: String!
  createdAd: DateTime
  files: String
  from: String!
  id: String
  read_status: Boolean
  subject: String!
}

input MessageCreateManyAdminInputEnvelope {
  data: [MessageCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input MessageCreateNestedManyWithoutAdminInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutAdminInput!]
  create: [MessageCreateWithoutAdminInput!]
  createMany: MessageCreateManyAdminInputEnvelope
}

input MessageCreateOrConnectWithoutAdminInput {
  create: MessageCreateWithoutAdminInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutAdminInput {
  answer_status: Boolean
  answeredAt: DateTime
  body: String!
  createdAd: DateTime
  files: String
  from: String!
  id: String
  read_status: Boolean
  subject: String!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  admin_id: SortOrder
  answer_status: SortOrder
  answeredAt: SortOrder
  body: SortOrder
  createdAd: SortOrder
  files: SortOrder
  from: SortOrder
  id: SortOrder
  read_status: SortOrder
  subject: SortOrder
}

enum MessageScalarFieldEnum {
  admin_id
  answer_status
  answeredAt
  body
  createdAd
  files
  from
  id
  read_status
  subject
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  admin_id: StringFilter
  answer_status: BoolFilter
  answeredAt: DateTimeNullableFilter
  body: StringFilter
  createdAd: DateTimeFilter
  files: StringFilter
  from: StringFilter
  id: StringFilter
  read_status: BoolFilter
  subject: StringFilter
}

input MessageUpdateInput {
  admin: AdminUpdateOneRequiredWithoutMessagesInput
  answer_status: BoolFieldUpdateOperationsInput
  answeredAt: NullableDateTimeFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  createdAd: DateTimeFieldUpdateOperationsInput
  files: StringFieldUpdateOperationsInput
  from: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  read_status: BoolFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
}

input MessageUpdateManyMutationInput {
  answer_status: BoolFieldUpdateOperationsInput
  answeredAt: NullableDateTimeFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  createdAd: DateTimeFieldUpdateOperationsInput
  files: StringFieldUpdateOperationsInput
  from: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  read_status: BoolFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
}

input MessageUpdateManyWithWhereWithoutAdminInput {
  data: MessageUpdateManyMutationInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateManyWithoutAdminInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutAdminInput!]
  create: [MessageCreateWithoutAdminInput!]
  createMany: MessageCreateManyAdminInputEnvelope
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [MessageUpdateManyWithWhereWithoutAdminInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutAdminInput!]
}

input MessageUpdateWithWhereUniqueWithoutAdminInput {
  data: MessageUpdateWithoutAdminInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithoutAdminInput {
  answer_status: BoolFieldUpdateOperationsInput
  answeredAt: NullableDateTimeFieldUpdateOperationsInput
  body: StringFieldUpdateOperationsInput
  createdAd: DateTimeFieldUpdateOperationsInput
  files: StringFieldUpdateOperationsInput
  from: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  read_status: BoolFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
}

input MessageUpsertWithWhereUniqueWithoutAdminInput {
  create: MessageCreateWithoutAdminInput!
  update: MessageUpdateWithoutAdminInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  admin: AdminRelationFilter
  admin_id: StringFilter
  answer_status: BoolFilter
  answeredAt: DateTimeNullableFilter
  body: StringFilter
  createdAd: DateTimeFilter
  files: StringFilter
  from: StringFilter
  id: StringFilter
  read_status: BoolFilter
  subject: StringFilter
}

input MessageWhereUniqueInput {
  id: String
}

type Mutation {
  answerMessage(data: AnswerMessageInput!): Boolean!
  confirmAdminDelete(code: Int, email: String, token: String): Boolean!
  confirmEmail(code: Int, email: String, token: String): Boolean
  confirmTokenOrCode(code: Int, email: String, token: String): Boolean!
  createAbout(data: AboutCreateInput!): About!
  createAdmin(data: AdminCreateInput!): Admin
  createManyQuestion(data: [QuestionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySketch(data: [SketchCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTech(data: [TechCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTechCategory(data: [TechCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createNewMessage(adminEmail: String!, data: MessageCreateInput!): Message
  createProject(data: ProjectCreateInput!): Project!
  createProjectWithNestedRelations(data: CreateProjectInput_PWNR!): Boolean!
  createQuestion(data: QuestionCreateInput!): Question!
  createSketch(data: SketchCreateInput!): Sketch!
  createStack(data: StackCreateInput!): Stack!
  createTech(data: TechCreateInput!): Tech!
  createTechCategory(data: TechCategoryCreateInput!): TechCategory!
  deleteAbout(where: AboutWhereUniqueInput!): About
  deleteAdmin(where: AdminWhereUniqueInput!): Boolean!
  deleteFile(filename: String!, isTemp: Boolean!): Boolean!
  deleteFiles(filenames: [String!]!, isTemp: Boolean!): Boolean!
  deleteManyAbout(where: AboutWhereInput): AffectedRowsOutput!
  deleteManyMessage(where: MessageWhereInput): AffectedRowsOutput!
  deleteManyProject(where: ProjectWhereInput): AffectedRowsOutput!
  deleteManyQuestion(where: QuestionWhereInput): AffectedRowsOutput!
  deleteManySketch(where: SketchWhereInput): AffectedRowsOutput!
  deleteManyTech(where: TechWhereInput): AffectedRowsOutput!
  deleteManyTechCategory(where: TechCategoryWhereInput): AffectedRowsOutput!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteSketch(where: SketchWhereUniqueInput!): Sketch
  deleteStack(where: StackWhereUniqueInput!): Stack
  deleteTech(where: TechWhereUniqueInput!): Tech
  deleteTechCategory(where: TechCategoryWhereUniqueInput!): TechCategory
  forgotPassword(email: String!): Boolean!
  login(data: LoginInputType!): LoginReturnType
  logout: Boolean
  moveFilesFromTemp(filenames: [String!]!): Boolean!
  resetPassword(code: Int, email: String!, needCode: Boolean!, newPassword: String!, token: String): String!
  updateAbout(data: AboutUpdateInput!, where: AboutWhereUniqueInput!): About
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateImage(file: Upload!, isEdit: Boolean = false, prevname: String!): String
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateSketch(data: SketchUpdateInput!, where: SketchWhereUniqueInput!): Sketch
  updateStack(data: StackUpdateInput!, where: StackWhereUniqueInput!): Stack
  updateTech(data: TechUpdateInput!, where: TechWhereUniqueInput!): Tech
  updateTechCategory(data: TechCategoryUpdateInput!, where: TechCategoryWhereUniqueInput!): TechCategory
  updateZipFile(files: [Upload!]!, isTemp: Boolean!, prevname: String!): String!
  uploadFilesToZip(files: [Upload!]!, isEdit: Boolean!): String!
  uploadMultipleFiles(files: [Upload!]!, isTemp: Boolean!): [String!]
  uploadSingleFile(file: Upload!, isEdit: Boolean = false): String!
  verifyPassword(data: UpdateAdminPasswordInput!): Boolean!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

type Project {
  _count: ProjectCount
  admin: Admin!
  admin_id: String!
  app_url: String!
  createdAt: DateTime!
  github_url: String!
  id: String!
  image: String!
  name: String!
  questions(cursor: QuestionWhereUniqueInput, distinct: [QuestionScalarFieldEnum!], orderBy: [QuestionOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionWhereInput): [Question!]!
  sketches(cursor: SketchWhereUniqueInput, distinct: [SketchScalarFieldEnum!], orderBy: [SketchOrderByWithRelationInput!], skip: Int, take: Int, where: SketchWhereInput): [Sketch!]!
  summary: String!
  tech_categories(cursor: TechCategoryWhereUniqueInput, distinct: [TechCategoryScalarFieldEnum!], orderBy: [TechCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: TechCategoryWhereInput): [TechCategory!]!
  type: String!
  updatedAt: DateTime!
}

type ProjectCount {
  questions: Int!
  sketches: Int!
  tech_categories: Int!
}

input ProjectCreateInput {
  admin: AdminCreateNestedOneWithoutProjectsInput!
  app_url: String!
  createdAt: DateTime
  github_url: String!
  id: String
  image: String!
  name: String!
  questions: QuestionCreateNestedManyWithoutProjectInput
  sketches: SketchCreateNestedManyWithoutProjectInput
  summary: String!
  tech_categories: TechCategoryCreateNestedManyWithoutProjectInput
  type: String!
  updatedAt: DateTime
}

input ProjectCreateManyAdminInput {
  app_url: String!
  createdAt: DateTime
  github_url: String!
  id: String
  image: String!
  name: String!
  summary: String!
  type: String!
  updatedAt: DateTime
}

input ProjectCreateManyAdminInputEnvelope {
  data: [ProjectCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateNestedManyWithoutAdminInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutAdminInput!]
  create: [ProjectCreateWithoutAdminInput!]
  createMany: ProjectCreateManyAdminInputEnvelope
}

input ProjectCreateNestedOneWithoutQuestionsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutQuestionsInput
  create: ProjectCreateWithoutQuestionsInput
}

input ProjectCreateNestedOneWithoutSketchesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutSketchesInput
  create: ProjectCreateWithoutSketchesInput
}

input ProjectCreateNestedOneWithoutTech_categoriesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutTech_categoriesInput
  create: ProjectCreateWithoutTech_categoriesInput
}

input ProjectCreateOrConnectWithoutAdminInput {
  create: ProjectCreateWithoutAdminInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutQuestionsInput {
  create: ProjectCreateWithoutQuestionsInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutSketchesInput {
  create: ProjectCreateWithoutSketchesInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateOrConnectWithoutTech_categoriesInput {
  create: ProjectCreateWithoutTech_categoriesInput!
  where: ProjectWhereUniqueInput!
}

input ProjectCreateWithoutAdminInput {
  app_url: String!
  createdAt: DateTime
  github_url: String!
  id: String
  image: String!
  name: String!
  questions: QuestionCreateNestedManyWithoutProjectInput
  sketches: SketchCreateNestedManyWithoutProjectInput
  summary: String!
  tech_categories: TechCategoryCreateNestedManyWithoutProjectInput
  type: String!
  updatedAt: DateTime
}

input ProjectCreateWithoutQuestionsInput {
  admin: AdminCreateNestedOneWithoutProjectsInput!
  app_url: String!
  createdAt: DateTime
  github_url: String!
  id: String
  image: String!
  name: String!
  sketches: SketchCreateNestedManyWithoutProjectInput
  summary: String!
  tech_categories: TechCategoryCreateNestedManyWithoutProjectInput
  type: String!
  updatedAt: DateTime
}

input ProjectCreateWithoutSketchesInput {
  admin: AdminCreateNestedOneWithoutProjectsInput!
  app_url: String!
  createdAt: DateTime
  github_url: String!
  id: String
  image: String!
  name: String!
  questions: QuestionCreateNestedManyWithoutProjectInput
  summary: String!
  tech_categories: TechCategoryCreateNestedManyWithoutProjectInput
  type: String!
  updatedAt: DateTime
}

input ProjectCreateWithoutTech_categoriesInput {
  admin: AdminCreateNestedOneWithoutProjectsInput!
  app_url: String!
  createdAt: DateTime
  github_url: String!
  id: String
  image: String!
  name: String!
  questions: QuestionCreateNestedManyWithoutProjectInput
  sketches: SketchCreateNestedManyWithoutProjectInput
  summary: String!
  type: String!
  updatedAt: DateTime
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  none: ProjectWhereInput
  some: ProjectWhereInput
}

input ProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProjectOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  admin_id: SortOrder
  app_url: SortOrder
  createdAt: SortOrder
  github_url: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  questions: QuestionOrderByRelationAggregateInput
  sketches: SketchOrderByRelationAggregateInput
  summary: SortOrder
  tech_categories: TechCategoryOrderByRelationAggregateInput
  type: SortOrder
  updatedAt: SortOrder
}

input ProjectRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

enum ProjectScalarFieldEnum {
  admin_id
  app_url
  createdAt
  github_url
  id
  image
  name
  summary
  type
  updatedAt
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  admin_id: StringFilter
  app_url: StringFilter
  createdAt: DateTimeFilter
  github_url: StringFilter
  id: StringFilter
  image: StringFilter
  name: StringFilter
  summary: StringFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectUpdateInput {
  admin: AdminUpdateOneRequiredWithoutProjectsInput
  app_url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  github_url: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutProjectInput
  sketches: SketchUpdateManyWithoutProjectInput
  summary: StringFieldUpdateOperationsInput
  tech_categories: TechCategoryUpdateManyWithoutProjectInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyMutationInput {
  app_url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  github_url: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  summary: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithWhereWithoutAdminInput {
  data: ProjectUpdateManyMutationInput!
  where: ProjectScalarWhereInput!
}

input ProjectUpdateManyWithoutAdminInput {
  connect: [ProjectWhereUniqueInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutAdminInput!]
  create: [ProjectCreateWithoutAdminInput!]
  createMany: ProjectCreateManyAdminInputEnvelope
  delete: [ProjectWhereUniqueInput!]
  deleteMany: [ProjectScalarWhereInput!]
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutAdminInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutAdminInput!]
}

input ProjectUpdateOneRequiredWithoutQuestionsInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutQuestionsInput
  create: ProjectCreateWithoutQuestionsInput
  update: ProjectUpdateWithoutQuestionsInput
  upsert: ProjectUpsertWithoutQuestionsInput
}

input ProjectUpdateOneRequiredWithoutSketchesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutSketchesInput
  create: ProjectCreateWithoutSketchesInput
  update: ProjectUpdateWithoutSketchesInput
  upsert: ProjectUpsertWithoutSketchesInput
}

input ProjectUpdateOneRequiredWithoutTech_categoriesInput {
  connect: ProjectWhereUniqueInput
  connectOrCreate: ProjectCreateOrConnectWithoutTech_categoriesInput
  create: ProjectCreateWithoutTech_categoriesInput
  update: ProjectUpdateWithoutTech_categoriesInput
  upsert: ProjectUpsertWithoutTech_categoriesInput
}

input ProjectUpdateWithWhereUniqueWithoutAdminInput {
  data: ProjectUpdateWithoutAdminInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateWithoutAdminInput {
  app_url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  github_url: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutProjectInput
  sketches: SketchUpdateManyWithoutProjectInput
  summary: StringFieldUpdateOperationsInput
  tech_categories: TechCategoryUpdateManyWithoutProjectInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutQuestionsInput {
  admin: AdminUpdateOneRequiredWithoutProjectsInput
  app_url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  github_url: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  sketches: SketchUpdateManyWithoutProjectInput
  summary: StringFieldUpdateOperationsInput
  tech_categories: TechCategoryUpdateManyWithoutProjectInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutSketchesInput {
  admin: AdminUpdateOneRequiredWithoutProjectsInput
  app_url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  github_url: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutProjectInput
  summary: StringFieldUpdateOperationsInput
  tech_categories: TechCategoryUpdateManyWithoutProjectInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpdateWithoutTech_categoriesInput {
  admin: AdminUpdateOneRequiredWithoutProjectsInput
  app_url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  github_url: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  questions: QuestionUpdateManyWithoutProjectInput
  sketches: SketchUpdateManyWithoutProjectInput
  summary: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProjectUpsertWithWhereUniqueWithoutAdminInput {
  create: ProjectCreateWithoutAdminInput!
  update: ProjectUpdateWithoutAdminInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpsertWithoutQuestionsInput {
  create: ProjectCreateWithoutQuestionsInput!
  update: ProjectUpdateWithoutQuestionsInput!
}

input ProjectUpsertWithoutSketchesInput {
  create: ProjectCreateWithoutSketchesInput!
  update: ProjectUpdateWithoutSketchesInput!
}

input ProjectUpsertWithoutTech_categoriesInput {
  create: ProjectCreateWithoutTech_categoriesInput!
  update: ProjectUpdateWithoutTech_categoriesInput!
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  admin: AdminRelationFilter
  admin_id: StringFilter
  app_url: StringFilter
  createdAt: DateTimeFilter
  github_url: StringFilter
  id: StringFilter
  image: StringFilter
  name: StringFilter
  questions: QuestionListRelationFilter
  sketches: SketchListRelationFilter
  summary: StringFilter
  tech_categories: TechCategoryListRelationFilter
  type: StringFilter
  updatedAt: DateTimeFilter
}

input ProjectWhereUniqueInput {
  id: String
}

type Query {
  about(where: AboutWhereUniqueInput!): About
  abouts(cursor: AboutWhereUniqueInput, distinct: [AboutScalarFieldEnum!], orderBy: [AboutOrderByWithRelationInput!], skip: Int, take: Int, where: AboutWhereInput): [About!]!
  getAdmin: Admin!
  getNumOfAdmins: Int
  isThereAnAdmin: Boolean!
  me: Admin
  message(where: MessageWhereUniqueInput!): Message
  messages(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum!], orderBy: [MessageOrderByWithRelationInput!], skip: Int, take: Int, where: MessageWhereInput): [Message!]!
  project(where: ProjectWhereUniqueInput!): Project
  projects(cursor: ProjectWhereUniqueInput, distinct: [ProjectScalarFieldEnum!], orderBy: [ProjectOrderByWithRelationInput!], skip: Int, take: Int, where: ProjectWhereInput): [Project!]!
  question(where: QuestionWhereUniqueInput!): Question
  questions(cursor: QuestionWhereUniqueInput, distinct: [QuestionScalarFieldEnum!], orderBy: [QuestionOrderByWithRelationInput!], skip: Int, take: Int, where: QuestionWhereInput): [Question!]!
  sketch(where: SketchWhereUniqueInput!): Sketch
  sketches(cursor: SketchWhereUniqueInput, distinct: [SketchScalarFieldEnum!], orderBy: [SketchOrderByWithRelationInput!], skip: Int, take: Int, where: SketchWhereInput): [Sketch!]!
  stacks(cursor: StackWhereUniqueInput, distinct: [StackScalarFieldEnum!], orderBy: [StackOrderByWithRelationInput!], skip: Int, take: Int, where: StackWhereInput): [Stack!]!
  tech(where: TechWhereUniqueInput!): Tech
  techCategories(cursor: TechCategoryWhereUniqueInput, distinct: [TechCategoryScalarFieldEnum!], orderBy: [TechCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: TechCategoryWhereInput): [TechCategory!]!
  techCategory(where: TechCategoryWhereUniqueInput!): TechCategory
  teches(cursor: TechWhereUniqueInput, distinct: [TechScalarFieldEnum!], orderBy: [TechOrderByWithRelationInput!], skip: Int, take: Int, where: TechWhereInput): [Tech!]!
}

enum QueryMode {
  default
  insensitive
}

type Question {
  answer: String!
  id: String!
  project: Project!
  project_id: String!
  question: String!
}

input QuestionCreateInput {
  answer: String!
  id: String
  project: ProjectCreateNestedOneWithoutQuestionsInput!
  question: String!
}

input QuestionCreateInput_PWNR {
  answer: String!
  question: String!
}

input QuestionCreateManyInput {
  answer: String!
  id: String
  project_id: String!
  question: String!
}

input QuestionCreateManyProjectInput {
  answer: String!
  id: String
  question: String!
}

input QuestionCreateManyProjectInputEnvelope {
  data: [QuestionCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input QuestionCreateNestedManyWithoutProjectInput {
  connect: [QuestionWhereUniqueInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutProjectInput!]
  create: [QuestionCreateWithoutProjectInput!]
  createMany: QuestionCreateManyProjectInputEnvelope
}

input QuestionCreateOrConnectWithoutProjectInput {
  create: QuestionCreateWithoutProjectInput!
  where: QuestionWhereUniqueInput!
}

input QuestionCreateWithoutProjectInput {
  answer: String!
  id: String
  question: String!
}

input QuestionListRelationFilter {
  every: QuestionWhereInput
  none: QuestionWhereInput
  some: QuestionWhereInput
}

input QuestionOrderByRelationAggregateInput {
  _count: SortOrder
}

input QuestionOrderByWithRelationInput {
  answer: SortOrder
  id: SortOrder
  project: ProjectOrderByWithRelationInput
  project_id: SortOrder
  question: SortOrder
}

enum QuestionScalarFieldEnum {
  answer
  id
  project_id
  question
}

input QuestionScalarWhereInput {
  AND: [QuestionScalarWhereInput!]
  NOT: [QuestionScalarWhereInput!]
  OR: [QuestionScalarWhereInput!]
  answer: StringFilter
  id: StringFilter
  project_id: StringFilter
  question: StringFilter
}

input QuestionUpdateInput {
  answer: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutQuestionsInput
  question: StringFieldUpdateOperationsInput
}

input QuestionUpdateManyMutationInput {
  answer: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
}

input QuestionUpdateManyWithWhereWithoutProjectInput {
  data: QuestionUpdateManyMutationInput!
  where: QuestionScalarWhereInput!
}

input QuestionUpdateManyWithoutProjectInput {
  connect: [QuestionWhereUniqueInput!]
  connectOrCreate: [QuestionCreateOrConnectWithoutProjectInput!]
  create: [QuestionCreateWithoutProjectInput!]
  createMany: QuestionCreateManyProjectInputEnvelope
  delete: [QuestionWhereUniqueInput!]
  deleteMany: [QuestionScalarWhereInput!]
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  update: [QuestionUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [QuestionUpdateManyWithWhereWithoutProjectInput!]
  upsert: [QuestionUpsertWithWhereUniqueWithoutProjectInput!]
}

input QuestionUpdateWithWhereUniqueWithoutProjectInput {
  data: QuestionUpdateWithoutProjectInput!
  where: QuestionWhereUniqueInput!
}

input QuestionUpdateWithoutProjectInput {
  answer: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  question: StringFieldUpdateOperationsInput
}

input QuestionUpsertWithWhereUniqueWithoutProjectInput {
  create: QuestionCreateWithoutProjectInput!
  update: QuestionUpdateWithoutProjectInput!
  where: QuestionWhereUniqueInput!
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  answer: StringFilter
  id: StringFilter
  project: ProjectRelationFilter
  project_id: StringFilter
  question: StringFilter
}

input QuestionWhereUniqueInput {
  id: String
}

type Sketch {
  description: String!
  downloadables: String!
  id: String!
  image: String!
  project: Project!
  project_id: String!
  summary: String!
  title: String!
}

input SketchCreateInput {
  description: String!
  downloadables: String!
  id: String
  image: String!
  project: ProjectCreateNestedOneWithoutSketchesInput!
  summary: String!
  title: String!
}

input SketchCreateInput_PWNR {
  description: String!
  downloadables: String!
  image: String!
  summary: String!
  title: String!
}

input SketchCreateManyInput {
  description: String!
  downloadables: String!
  id: String
  image: String!
  project_id: String!
  summary: String!
  title: String!
}

input SketchCreateManyProjectInput {
  description: String!
  downloadables: String!
  id: String
  image: String!
  summary: String!
  title: String!
}

input SketchCreateManyProjectInputEnvelope {
  data: [SketchCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input SketchCreateNestedManyWithoutProjectInput {
  connect: [SketchWhereUniqueInput!]
  connectOrCreate: [SketchCreateOrConnectWithoutProjectInput!]
  create: [SketchCreateWithoutProjectInput!]
  createMany: SketchCreateManyProjectInputEnvelope
}

input SketchCreateOrConnectWithoutProjectInput {
  create: SketchCreateWithoutProjectInput!
  where: SketchWhereUniqueInput!
}

input SketchCreateWithoutProjectInput {
  description: String!
  downloadables: String!
  id: String
  image: String!
  summary: String!
  title: String!
}

input SketchListRelationFilter {
  every: SketchWhereInput
  none: SketchWhereInput
  some: SketchWhereInput
}

input SketchOrderByRelationAggregateInput {
  _count: SortOrder
}

input SketchOrderByWithRelationInput {
  description: SortOrder
  downloadables: SortOrder
  id: SortOrder
  image: SortOrder
  project: ProjectOrderByWithRelationInput
  project_id: SortOrder
  summary: SortOrder
  title: SortOrder
}

enum SketchScalarFieldEnum {
  description
  downloadables
  id
  image
  project_id
  summary
  title
}

input SketchScalarWhereInput {
  AND: [SketchScalarWhereInput!]
  NOT: [SketchScalarWhereInput!]
  OR: [SketchScalarWhereInput!]
  description: StringFilter
  downloadables: StringFilter
  id: StringFilter
  image: StringFilter
  project_id: StringFilter
  summary: StringFilter
  title: StringFilter
}

input SketchUpdateInput {
  description: StringFieldUpdateOperationsInput
  downloadables: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutSketchesInput
  summary: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input SketchUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  downloadables: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  summary: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input SketchUpdateManyWithWhereWithoutProjectInput {
  data: SketchUpdateManyMutationInput!
  where: SketchScalarWhereInput!
}

input SketchUpdateManyWithoutProjectInput {
  connect: [SketchWhereUniqueInput!]
  connectOrCreate: [SketchCreateOrConnectWithoutProjectInput!]
  create: [SketchCreateWithoutProjectInput!]
  createMany: SketchCreateManyProjectInputEnvelope
  delete: [SketchWhereUniqueInput!]
  deleteMany: [SketchScalarWhereInput!]
  disconnect: [SketchWhereUniqueInput!]
  set: [SketchWhereUniqueInput!]
  update: [SketchUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [SketchUpdateManyWithWhereWithoutProjectInput!]
  upsert: [SketchUpsertWithWhereUniqueWithoutProjectInput!]
}

input SketchUpdateWithWhereUniqueWithoutProjectInput {
  data: SketchUpdateWithoutProjectInput!
  where: SketchWhereUniqueInput!
}

input SketchUpdateWithoutProjectInput {
  description: StringFieldUpdateOperationsInput
  downloadables: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  summary: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input SketchUpsertWithWhereUniqueWithoutProjectInput {
  create: SketchCreateWithoutProjectInput!
  update: SketchUpdateWithoutProjectInput!
  where: SketchWhereUniqueInput!
}

input SketchWhereInput {
  AND: [SketchWhereInput!]
  NOT: [SketchWhereInput!]
  OR: [SketchWhereInput!]
  description: StringFilter
  downloadables: StringFilter
  id: StringFilter
  image: StringFilter
  project: ProjectRelationFilter
  project_id: StringFilter
  summary: StringFilter
  title: StringFilter
}

input SketchWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

type Stack {
  admin_id: String!
  id: String!
  image: String!
  title: String!
}

input StackCreateInput {
  admin: AdminCreateNestedOneWithoutStackInput!
  id: String
  image: String!
  title: String!
}

input StackCreateManyAdminInput {
  id: String
  image: String!
  title: String!
}

input StackCreateManyAdminInputEnvelope {
  data: [StackCreateManyAdminInput!]!
  skipDuplicates: Boolean
}

input StackCreateNestedManyWithoutAdminInput {
  connect: [StackWhereUniqueInput!]
  connectOrCreate: [StackCreateOrConnectWithoutAdminInput!]
  create: [StackCreateWithoutAdminInput!]
  createMany: StackCreateManyAdminInputEnvelope
}

input StackCreateOrConnectWithoutAdminInput {
  create: StackCreateWithoutAdminInput!
  where: StackWhereUniqueInput!
}

input StackCreateWithoutAdminInput {
  id: String
  image: String!
  title: String!
}

input StackListRelationFilter {
  every: StackWhereInput
  none: StackWhereInput
  some: StackWhereInput
}

input StackOrderByRelationAggregateInput {
  _count: SortOrder
}

input StackOrderByWithRelationInput {
  admin: AdminOrderByWithRelationInput
  admin_id: SortOrder
  id: SortOrder
  image: SortOrder
  title: SortOrder
}

enum StackScalarFieldEnum {
  admin_id
  id
  image
  title
}

input StackScalarWhereInput {
  AND: [StackScalarWhereInput!]
  NOT: [StackScalarWhereInput!]
  OR: [StackScalarWhereInput!]
  admin_id: StringFilter
  id: StringFilter
  image: StringFilter
  title: StringFilter
}

input StackUpdateInput {
  admin: AdminUpdateOneRequiredWithoutStackInput
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input StackUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input StackUpdateManyWithWhereWithoutAdminInput {
  data: StackUpdateManyMutationInput!
  where: StackScalarWhereInput!
}

input StackUpdateManyWithoutAdminInput {
  connect: [StackWhereUniqueInput!]
  connectOrCreate: [StackCreateOrConnectWithoutAdminInput!]
  create: [StackCreateWithoutAdminInput!]
  createMany: StackCreateManyAdminInputEnvelope
  delete: [StackWhereUniqueInput!]
  deleteMany: [StackScalarWhereInput!]
  disconnect: [StackWhereUniqueInput!]
  set: [StackWhereUniqueInput!]
  update: [StackUpdateWithWhereUniqueWithoutAdminInput!]
  updateMany: [StackUpdateManyWithWhereWithoutAdminInput!]
  upsert: [StackUpsertWithWhereUniqueWithoutAdminInput!]
}

input StackUpdateWithWhereUniqueWithoutAdminInput {
  data: StackUpdateWithoutAdminInput!
  where: StackWhereUniqueInput!
}

input StackUpdateWithoutAdminInput {
  id: StringFieldUpdateOperationsInput
  image: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input StackUpsertWithWhereUniqueWithoutAdminInput {
  create: StackCreateWithoutAdminInput!
  update: StackUpdateWithoutAdminInput!
  where: StackWhereUniqueInput!
}

input StackWhereInput {
  AND: [StackWhereInput!]
  NOT: [StackWhereInput!]
  OR: [StackWhereInput!]
  admin: AdminRelationFilter
  admin_id: StringFilter
  id: StringFilter
  image: StringFilter
  title: StringFilter
}

input StackWhereUniqueInput {
  id: String
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Subscription {
  subscribeMessages: Message!
}

type Tech {
  id: String!
  name: String!
  tech_categories: TechCategory!
  tech_category_id: String!
}

type TechCategory {
  _count: TechCategoryCount
  id: String!
  name: String!
  project: Project!
  project_id: String!
  techs(cursor: TechWhereUniqueInput, distinct: [TechScalarFieldEnum!], orderBy: [TechOrderByWithRelationInput!], skip: Int, take: Int, where: TechWhereInput): [Tech!]!
}

type TechCategoryCount {
  techs: Int!
}

input TechCategoryCreateInput {
  id: String
  name: String!
  project: ProjectCreateNestedOneWithoutTech_categoriesInput!
  techs: TechCreateNestedManyWithoutTech_categoriesInput
}

input TechCategoryCreateInput_PWNR {
  name: String!
  techs: [TechCreateInput_PWNR!]!
}

input TechCategoryCreateManyInput {
  id: String
  name: String!
  project_id: String!
}

input TechCategoryCreateManyProjectInput {
  id: String
  name: String!
}

input TechCategoryCreateManyProjectInputEnvelope {
  data: [TechCategoryCreateManyProjectInput!]!
  skipDuplicates: Boolean
}

input TechCategoryCreateNestedManyWithoutProjectInput {
  connect: [TechCategoryWhereUniqueInput!]
  connectOrCreate: [TechCategoryCreateOrConnectWithoutProjectInput!]
  create: [TechCategoryCreateWithoutProjectInput!]
  createMany: TechCategoryCreateManyProjectInputEnvelope
}

input TechCategoryCreateNestedOneWithoutTechsInput {
  connect: TechCategoryWhereUniqueInput
  connectOrCreate: TechCategoryCreateOrConnectWithoutTechsInput
  create: TechCategoryCreateWithoutTechsInput
}

input TechCategoryCreateOrConnectWithoutProjectInput {
  create: TechCategoryCreateWithoutProjectInput!
  where: TechCategoryWhereUniqueInput!
}

input TechCategoryCreateOrConnectWithoutTechsInput {
  create: TechCategoryCreateWithoutTechsInput!
  where: TechCategoryWhereUniqueInput!
}

input TechCategoryCreateWithoutProjectInput {
  id: String
  name: String!
  techs: TechCreateNestedManyWithoutTech_categoriesInput
}

input TechCategoryCreateWithoutTechsInput {
  id: String
  name: String!
  project: ProjectCreateNestedOneWithoutTech_categoriesInput!
}

input TechCategoryListRelationFilter {
  every: TechCategoryWhereInput
  none: TechCategoryWhereInput
  some: TechCategoryWhereInput
}

input TechCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input TechCategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  project: ProjectOrderByWithRelationInput
  project_id: SortOrder
  techs: TechOrderByRelationAggregateInput
}

input TechCategoryRelationFilter {
  is: TechCategoryWhereInput
  isNot: TechCategoryWhereInput
}

enum TechCategoryScalarFieldEnum {
  id
  name
  project_id
}

input TechCategoryScalarWhereInput {
  AND: [TechCategoryScalarWhereInput!]
  NOT: [TechCategoryScalarWhereInput!]
  OR: [TechCategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  project_id: StringFilter
}

input TechCategoryUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutTech_categoriesInput
  techs: TechUpdateManyWithoutTech_categoriesInput
}

input TechCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TechCategoryUpdateManyWithWhereWithoutProjectInput {
  data: TechCategoryUpdateManyMutationInput!
  where: TechCategoryScalarWhereInput!
}

input TechCategoryUpdateManyWithoutProjectInput {
  connect: [TechCategoryWhereUniqueInput!]
  connectOrCreate: [TechCategoryCreateOrConnectWithoutProjectInput!]
  create: [TechCategoryCreateWithoutProjectInput!]
  createMany: TechCategoryCreateManyProjectInputEnvelope
  delete: [TechCategoryWhereUniqueInput!]
  deleteMany: [TechCategoryScalarWhereInput!]
  disconnect: [TechCategoryWhereUniqueInput!]
  set: [TechCategoryWhereUniqueInput!]
  update: [TechCategoryUpdateWithWhereUniqueWithoutProjectInput!]
  updateMany: [TechCategoryUpdateManyWithWhereWithoutProjectInput!]
  upsert: [TechCategoryUpsertWithWhereUniqueWithoutProjectInput!]
}

input TechCategoryUpdateOneRequiredWithoutTechsInput {
  connect: TechCategoryWhereUniqueInput
  connectOrCreate: TechCategoryCreateOrConnectWithoutTechsInput
  create: TechCategoryCreateWithoutTechsInput
  update: TechCategoryUpdateWithoutTechsInput
  upsert: TechCategoryUpsertWithoutTechsInput
}

input TechCategoryUpdateWithWhereUniqueWithoutProjectInput {
  data: TechCategoryUpdateWithoutProjectInput!
  where: TechCategoryWhereUniqueInput!
}

input TechCategoryUpdateWithoutProjectInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  techs: TechUpdateManyWithoutTech_categoriesInput
}

input TechCategoryUpdateWithoutTechsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  project: ProjectUpdateOneRequiredWithoutTech_categoriesInput
}

input TechCategoryUpsertWithWhereUniqueWithoutProjectInput {
  create: TechCategoryCreateWithoutProjectInput!
  update: TechCategoryUpdateWithoutProjectInput!
  where: TechCategoryWhereUniqueInput!
}

input TechCategoryUpsertWithoutTechsInput {
  create: TechCategoryCreateWithoutTechsInput!
  update: TechCategoryUpdateWithoutTechsInput!
}

input TechCategoryWhereInput {
  AND: [TechCategoryWhereInput!]
  NOT: [TechCategoryWhereInput!]
  OR: [TechCategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  project: ProjectRelationFilter
  project_id: StringFilter
  techs: TechListRelationFilter
}

input TechCategoryWhereUniqueInput {
  id: String
}

input TechCreateInput {
  id: String
  name: String!
  tech_categories: TechCategoryCreateNestedOneWithoutTechsInput!
}

input TechCreateInput_PWNR {
  name: String!
}

input TechCreateManyInput {
  id: String
  name: String!
  tech_category_id: String!
}

input TechCreateManyTech_categoriesInput {
  id: String
  name: String!
}

input TechCreateManyTech_categoriesInputEnvelope {
  data: [TechCreateManyTech_categoriesInput!]!
  skipDuplicates: Boolean
}

input TechCreateNestedManyWithoutTech_categoriesInput {
  connect: [TechWhereUniqueInput!]
  connectOrCreate: [TechCreateOrConnectWithoutTech_categoriesInput!]
  create: [TechCreateWithoutTech_categoriesInput!]
  createMany: TechCreateManyTech_categoriesInputEnvelope
}

input TechCreateOrConnectWithoutTech_categoriesInput {
  create: TechCreateWithoutTech_categoriesInput!
  where: TechWhereUniqueInput!
}

input TechCreateWithoutTech_categoriesInput {
  id: String
  name: String!
}

input TechListRelationFilter {
  every: TechWhereInput
  none: TechWhereInput
  some: TechWhereInput
}

input TechOrderByRelationAggregateInput {
  _count: SortOrder
}

input TechOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  tech_categories: TechCategoryOrderByWithRelationInput
  tech_category_id: SortOrder
}

enum TechScalarFieldEnum {
  id
  name
  tech_category_id
}

input TechScalarWhereInput {
  AND: [TechScalarWhereInput!]
  NOT: [TechScalarWhereInput!]
  OR: [TechScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  tech_category_id: StringFilter
}

input TechUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tech_categories: TechCategoryUpdateOneRequiredWithoutTechsInput
}

input TechUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TechUpdateManyWithWhereWithoutTech_categoriesInput {
  data: TechUpdateManyMutationInput!
  where: TechScalarWhereInput!
}

input TechUpdateManyWithoutTech_categoriesInput {
  connect: [TechWhereUniqueInput!]
  connectOrCreate: [TechCreateOrConnectWithoutTech_categoriesInput!]
  create: [TechCreateWithoutTech_categoriesInput!]
  createMany: TechCreateManyTech_categoriesInputEnvelope
  delete: [TechWhereUniqueInput!]
  deleteMany: [TechScalarWhereInput!]
  disconnect: [TechWhereUniqueInput!]
  set: [TechWhereUniqueInput!]
  update: [TechUpdateWithWhereUniqueWithoutTech_categoriesInput!]
  updateMany: [TechUpdateManyWithWhereWithoutTech_categoriesInput!]
  upsert: [TechUpsertWithWhereUniqueWithoutTech_categoriesInput!]
}

input TechUpdateWithWhereUniqueWithoutTech_categoriesInput {
  data: TechUpdateWithoutTech_categoriesInput!
  where: TechWhereUniqueInput!
}

input TechUpdateWithoutTech_categoriesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input TechUpsertWithWhereUniqueWithoutTech_categoriesInput {
  create: TechCreateWithoutTech_categoriesInput!
  update: TechUpdateWithoutTech_categoriesInput!
  where: TechWhereUniqueInput!
}

input TechWhereInput {
  AND: [TechWhereInput!]
  NOT: [TechWhereInput!]
  OR: [TechWhereInput!]
  id: StringFilter
  name: StringFilter
  tech_categories: TechCategoryRelationFilter
  tech_category_id: StringFilter
}

input TechWhereUniqueInput {
  id: String
}

input UpdateAdminPasswordInput {
  oldPassword: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
